# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'yaml'

# Read YAML files with box details
if not File.file?('vagrant.yml')
  STDERR.puts "Can't find configuration file vagrant.yml"
end
settings = YAML.load_file('vagrant.yml')

# Managements
managements_conf = YAML.load_file(File.join(File.dirname(__FILE__),
 '../profiles/' + settings['profile'] + '/inventory/cluster/nodes/managements.yml'))
managements = managements_conf['mg_managements']['children']['equipment_typeM']['hosts']

# Computes
computes_conf = YAML.load_file(File.join(File.dirname(__FILE__),
 '../profiles/' + settings['profile'] + '/inventory/cluster/nodes/computes.yml'))
computes = computes_conf['mg_computes']['children']['equipment_typeC']['hosts']

# Logins
logins_conf = YAML.load_file(File.join(File.dirname(__FILE__),
 '../profiles/' + settings['profile'] + '/inventory/cluster/nodes/logins.yml'))
logins = logins_conf['mg_logins']['children']['equipment_typeL']['hosts']


Vagrant.configure("2") do |config|

  ##### DEFINE MGMT VM #####
  managements.each do |management|
    config.vm.define management[0], primary: true do |mgmt|
      mgmt.vm.hostname = management[0]
      mgmt.vm.box = settings['vm_box']
      mgmt.vm.box_check_update = false
      mgmt.vm.network :private_network,
        :ip => management[1]['network_interfaces']['eth1']['ip4'],
        :mac => (management[1]['network_interfaces']['eth1']['mac']).tr(':',''),
        :libvirt__dhcp_enabled => false,
        :libvirt__forward_mode => "veryisolated",
        :libvirt__netmask => "255.255.0.0",
        :libvirt__network_address => "10.10.0.0",
        :libvirt__network_name => management[1]['network_interfaces']['eth1']['network'],
        :virtualbox__netmask => "255.255.0.0",
        :virtualbox__intnet => true
      mgmt.vm.network :private_network,
        :ip => management[1]['network_interfaces']['eth2']['ip4'],
        :libvirt__dhcp_enabled => false,
        :libvirt__forward_mode => "veryisolated",
        :libvirt__netmask => "255.255.0.0",
        :libvirt__network_address => "10.20.0.0",
        :libvirt__network_name => management[1]['network_interfaces']['eth2']['network'],
        :virtualbox__netmask => "255.255.0.0",
        :virtualbox__intnet => true

      ## LIBVIRT PROVIDER ##
      mgmt.vm.provider :libvirt do |domain|
        domain.cpus = 2
        domain.machine_virtual_size = 25 # GB
        domain.memory = 2048
        if settings['os_iso']
          domain.storage :file, :device => :cdrom, :path => File.expand_path(settings['os_iso'])
        end
        if settings['storage_pool_name']
          domain.storage_pool_name = settings['storage_pool_name']
        end

        # Add shared drives
        unless settings['mgmt_shared_drives'].nil?
          # Create and attach the drives
          (1..settings['mgmt_shared_drives']).each do |n|
            drive = File.basename(Dir.getwd) + '_mgmt_shared' + n.to_s() + '.raw'
            domain.storage :file, :path => drive, \
              :size => settings['mgmt_drive_size'].to_s + 'M', \
              :type => 'raw', :shareable => true, :cache => 'directsync'
          end
        end
      end

      ## VIRTUALBOX PROVIDER ##
      mgmt.vm.provider :virtualbox do |domain|
        domain.cpus = 2
        domain.memory = 2048
        if settings['os_iso']
          domain.customize ["storageattach", :id, "--storagectl", "IDE", "--port", "1", "--device", "1", "--type", "dvddrive", "--medium", settings['os_iso']]
          # Ensure the VM will boot on drive, not on dvd
          domain.customize ["modifyvm", :id, "--boot1", "disk"]
        end

        # Add shared drives
        unless settings['mgmt_shared_drives'].nil?
          # Attach a SATA storage controller
          domain.customize ['storagectl', :id, '--name', 'SATA', \
                            '--add', 'sata', '--controller', 'IntelAhci', \
                            '--hostiocache', 'off']

          # Create and attach the drives
          (1..settings['mgmt_shared_drives']).each do |n|
            drive = '.vagrant/drives/mgmt_shared' + n.to_s() + '.vdi'

            if management[0] == settings['first_management_node']
              unless File.exist?(drive)
                 domain.customize ['createmedium', 'disk', \
                                   '--filename', drive, '--variant', 'Fixed', \
                                   '--size', settings['mgmt_drive_size']]
                 domain.customize ['modifymedium', 'disk', drive, \
                                   '--type', 'shareable']
              end
            end

            domain.customize ['storageattach', :id, '--storagectl', 'SATA', \
                              '--port', n-1, '--type', 'hdd', '--medium', drive]
          end
        end
      end

      # Bootstrap the first management node only
      if management[0] == settings['first_management_node']
        # Copy the inventory and playbooks
        mgmt.vm.synced_folder '../profiles/' + settings['profile'], "/home/vagrant/profiles", type: "rsync"
        if settings['boostrap_script']
          mgmt.vm.provision "shell", path: settings['boostrap_script']
        end
      end
    end
  end

  ##### DEFINE COMPUTE VM #####
  # https://github.com/vagrant-libvirt/vagrant-libvirt#no-box-and-pxe-boot
  computes.each do |compute|
    config.vm.define compute[0] do |pxeclient|
      pxeclient.vm.network :private_network,
        :ip => compute[1]['network_interfaces']['ens5']['ip4'],
        :mac => (compute[1]['network_interfaces']['ens5']['mac']).tr(':',''),
        :libvirt__dhcp_enabled => false,
        :libvirt__forward_mode => "veryisolated",
        :libvirt__netmask => "255.255.0.0",
        :libvirt__network_address => "10.10.0.0",
        :libvirt__network_name => compute[1]['network_interfaces']['ens5']['network'],
        :virtualbox__intnet => true
      pxeclient.vm.network :private_network,
        :ip => compute[1]['network_interfaces']['ens6']['ip4'],
        :libvirt__dhcp_enabled => false,
        :libvirt__forward_mode => "veryisolated",
        :libvirt__netmask => "255.255.0.0",
        :libvirt__network_address => "10.20.0.0",
        :libvirt__network_name => compute[1]['network_interfaces']['ens6']['network'],
        :virtualbox__intnet => true
      pxeclient.vm.provider :libvirt do |domain|
        domain.boot 'network'
        domain.boot 'hd'
        domain.cpus = 2
        domain.memory = 2048
        domain.mgmt_attach = false
        domain.storage :file, :size => '5G', :type => 'qcow2'
        if settings['storage_pool_name']
          domain.storage_pool_name = settings['storage_pool_name']
        end
      end
      pxeclient.vm.provider :virtualbox do |domain, override|
        override.vm.box = settings['vm_box']
        domain.cpus = 2
        domain.memory = 2048
        # Ensure the VM will boot on network first
        domain.customize ["modifyvm", :id, "--boot1", "net"]
        # nic1 is NAT used by Vagrant, nic2 is 'ens5' above. Boot with nic2.
        domain.customize ["modifyvm", :id, "--nicbootprio2", "1"]
      end
    end
  end

  ##### DEFINE LOGIN VM #####
  logins.each do |login|
    config.vm.define login[0] do |pxeclient|
      pxeclient.vm.network :private_network,
        :ip => login[1]['network_interfaces']['ens6']['ip4'],
        :mac => (login[1]['network_interfaces']['ens6']['mac']).tr(':',''),
        :libvirt__dhcp_enabled => false,
        :libvirt__forward_mode => "veryisolated",
        :libvirt__netmask => "255.255.0.0",
        :libvirt__network_address => "10.10.0.0",
        :libvirt__network_name => login[1]['network_interfaces']['ens6']['network'],
        :virtualbox__intnet => true
      pxeclient.vm.network :private_network,
        :ip => login[1]['network_interfaces']['ens7']['ip4'],
        :libvirt__dhcp_enabled => false,
        :libvirt__forward_mode => "veryisolated",
        :libvirt__netmask => "255.255.0.0",
        :libvirt__network_address => "10.20.0.0",
        :libvirt__network_name => login[1]['network_interfaces']['ens7']['network'],
        :virtualbox__intnet => true
      pxeclient.vm.provider :libvirt do |domain|
        domain.boot 'network'
        domain.boot 'hd'
        domain.cpus = 2
        domain.memory = 2048
        domain.storage :file, :size => '5G', :type => 'qcow2'
        if settings['storage_pool_name']
          domain.storage_pool_name = settings['storage_pool_name']
        end
      end
      pxeclient.vm.provider :virtualbox do |domain, override|
        override.vm.box = settings['vm_box']
        domain.cpus = 2
        domain.memory = 2048
        # Ensure the VM will boot on network first
        domain.customize ["modifyvm", :id, "--boot1", "net"]
        # nic1 is NAT used by Vagrant, nic2 is 'ens6' above. Boot with nic2.
        domain.customize ["modifyvm", :id, "--nicbootprio2", "1"]
      end
    end
  end

end

